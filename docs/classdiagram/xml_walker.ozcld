classdiagram tree_walker {
    class "TreeWalker\<S, D\>" {
        id: TreeWalker;
        ==
        "- getInstanceChildren(parentNode : S) : List\<S\>";
        ==
        "+ TreeWalker(nodeVsitor : NodeVisitor\<S, D\>)";
        "+ walk(currentNode : S, visitor : NodeVisitor\<S, D\>) : NodeVisitResult";
        "+ setInstanceChildrenGetProcess(getChildrenProcess : Function\<S, List\<S\>\>) : void";
    }

    class "NodeVisitor\<S, D\>" {
        stereotype: interface;
        id: NodeVisitor;
        ==
        "- generateDestInstance(sourceNode : S) : D";
        "- addDestInstanceChild(parentNode : D, currentNode : D) : void";
        ==
        "+ visitNode(currentSourceNode : S) : NodeVisitResult";
        "+ setDestInstanceGenerateProcess(generatedProcess : Function\<S, D\>) : void";
        "+ setDestInstanceAddChildProcess(addChildProcess : BiConsumer\<D, D\>) : void";
    }

    class NodeVisitResult {
        stereotype: enum;
        ==
        "+ CONTINUE";
        "+ TERMINATE";
        "+ SKIP_SUBTREE";
        "+ SKIP_SIBLINGS";
        ==
    }

    TreeWalker -> NodeVisitor;
    TreeWalker -> NodeVisitResult;
    NodeVisitor -> NodeVisitResult;
}
